@startuml
'https://plantuml.com/class-diagram


interface EventI

interface DomainEventI

interface EventPublisher{
    + void publish(DomainEventI domainEvent)
}

interface DistributedCacheService{
    + put(String key, String value)
    + put(String key, Object value)
    + put(String key, Object value, long timeout, TimeUnit unit)
    + put(String key, Object value, long expireTime)
    + <T> T getObject(String key, Class<T> targetClass)
    + String getString(String key)
    + <T> List<T> getList(String key, Class<T> targetClass)
    + Boolean delete(String key)
    + Boolean hasKey(String key)
    + default Long decrement(String key, long delta)
    + default Long increment(String key, long delta)
}

interface DistributedLockFactory{
    + DistributedLock getDistributedLock(String key)
}

interface SeckillOrderDomainService{
    + boolean saveSeckillOrder(SeckillOrder seckillOrder)
    + List<SeckillOrder> getSeckillOrderByUserId(Long userId)
    + List<SeckillOrder> getSeckillOrderByActivityId(Long activityId)
}

interface SeckillOrderService{
    + Long saveSeckillOrder(SeckillOrderDTO seckillOrderDTO)
    + List<SeckillOrder> getSeckillOrderByUserId(Long userId)
    + List<SeckillOrder> getSeckillOrderByActivityId(Long activityId)
}

interface SeckillPlaceOrderService{
    + Long placeOrder(Long userId, SeckillOrderCommand seckillOrderCommand)
    + default SeckillOrder buildSeckillOrder(Long userId, SeckillOrderCommand seckillOrderCommand, SeckillGoodsDTO seckillGoods)
    + default void checkSeckillGoods(SeckillOrderCommand seckillOrderCommand, SeckillGoodsDTO seckillGoods)
}

interface SeckillGoodsDomainService{
    + void saveSeckillGoods(SeckillGoods seckillGoods)
    + SeckillGoods getSeckillGoodsId(Long id)
    + List<SeckillGoods> getSeckillGoodsByActivityId(Long activityId)
    + void updateStatus(Integer status, Long id)
    + boolean updateAvailableStock(Integer count, Long id)
    + boolean updateDbAvailableStock(Integer count, Long id)
    + Integer getAvailableStockById(Long id)
}

class SeckillGoodsDomainServiceImpl{
    - SeckillGoodsRepository seckillGoodsRepository
    - EventPublisher eventPublisher
    + void saveSeckillGoods(SeckillGoods seckillGoods)
    + SeckillGoods getSeckillGoodsId(Long id)
    + List<SeckillGoods> getSeckillGoodsByActivityId(Long activityId)
    + void updateStatus(Integer status, Long id)
    + boolean updateAvailableStock(Integer count, Long id)
    + boolean updateDbAvailableStock(Integer count, Long id)
    + Integer getAvailableStockById(Long id)
}

class SeckillPlaceOrderLockService{
    - SeckillGoodsService seckillGoodsService
    - SeckillOrderDomainService seckillOrderDomainService
    - DistributedLockFactory distributedLockFactory
    - DistributedCacheService distributedCacheService
    + Long placeOrder(Long userId, SeckillOrderCommand seckillOrderCommand)
}

class SeckillOrderDomainServiceImpl{
    - SeckillOrderRepository seckillOrderRepository
    - EventPublisher eventPublisher
    + boolean saveSeckillOrder(SeckillOrder seckillOrder)
    + List<SeckillOrder> getSeckillOrderByUserId(Long userId)
    + List<SeckillOrder> getSeckillOrderByActivityId(Long activityId)
}

class SeckillOrderServiceImpl{
    - SeckillGoodsService seckillGoodsService
    - SeckillOrderDomainService seckillOrderDomainService
    + Long saveSeckillOrder(SeckillOrderDTO seckillOrderDTO)
    + List<SeckillOrder> getSeckillOrderByUserId(Long userId)
    + List<SeckillOrder> getSeckillOrderByActivityId(Long activityId)
}

class SeckillBaseEvent{
    - Long id
    - Integer status
    + SeckillBaseEvent(Long id, Integer status)
    + Long getId()
    + void setId(Long id)
    + Integer getStatus()
    + void setStatus(Integer status)
}

class SeckillOrderEvent{
    + SeckillOrderEvent(Long id, Integer status)
}

class LocalDomainEventPublisher{
    - EventBusI eventBus
    + void publish(DomainEventI domainEvent)
}

class SeckillOrderEventHandler{
    + Response execute(SeckillOrderEvent seckillOrderEvent)
}

EventI <|-- DomainEventI : 继承
DomainEventI <|..  SeckillBaseEvent : 实现
SeckillGoodsDomainService <|..  SeckillGoodsDomainServiceImpl : 实现
SeckillPlaceOrderService <|..  SeckillPlaceOrderLockService : 实现
DistributedCacheService <..  SeckillPlaceOrderLockService : 依赖
DistributedLockFactory <..  SeckillPlaceOrderLockService : 依赖
SeckillOrderDomainService <|.. SeckillOrderDomainServiceImpl : 实现
SeckillOrderService <|.. SeckillOrderServiceImpl : 实现
EventPublisher <.. SeckillOrderDomainServiceImpl : 依赖
EventPublisher <.. SeckillGoodsDomainServiceImpl : 依赖
SeckillOrderDomainService <.. SeckillOrderServiceImpl : 依赖
SeckillOrderServiceImpl ..> SeckillPlaceOrderService : 依赖
EventPublisher <|.. LocalDomainEventPublisher : 实现
DomainEventI <. LocalDomainEventPublisher : 依赖
SeckillBaseEvent <|- SeckillOrderEvent : 继承
SeckillOrderEvent <. SeckillOrderEventHandler : 依赖
@enduml